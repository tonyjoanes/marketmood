name: API CI

on:
  push:
    branches: [main]
    paths:
      - "src/api/**"
      - "src/test/**"
      - ".github/workflows/api-ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/api/**"
      - "src/test/**"
      - ".github/workflows/api-ci.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: |
          dotnet restore src/api/api.csproj
          dotnet restore src/test/api.tests.csproj

      - name: Build
        run: |
          dotnet build src/api/api.csproj --no-restore
          dotnet build src/test/api.tests.csproj --no-restore

      # Install test coverage tools
      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-reportgenerator-globaltool

      # Run tests with coverage
      - name: Test with coverage
        run: dotnet test src/test/api.tests.csproj --no-build --collect:"XPlat Code Coverage" --results-directory ./coverage

      # Generate coverage report
      - name: Generate coverage report
        run: |
          reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coveragereport -reporttypes:Html;Cobertura;Badges

      # Upload coverage report as artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coveragereport

      # Upload coverage to Codecov (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coveragereport/Cobertura.xml
          fail_ci_if_error: false

      # Check minimum code coverage (optional)
      - name: Check code coverage
        run: |
          COVERAGE=$(grep -o 'line-rate="[^"]*"' ./coverage/**/coverage.cobertura.xml | grep -o '[0-9.]*')
          COVERAGE=$(echo "$COVERAGE * 100" | bc)
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Code coverage is below 70%: $COVERAGE%"
            exit 1
          fi
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: |
          dotnet restore src/api/api.csproj

      - name: Build
        run: dotnet build src/api/api.csproj --no-restore --configuration Release

      # Optional: Code quality checks
      - name: Check Code Format
        continue-on-error: true
        run: |
          dotnet tool install --global dotnet-format
          dotnet format src/api/api.csproj --verify-no-changes

      # Optional: Run mutation testing
      - name: Run Mutation Testing
        continue-on-error: true
        run: |
          dotnet tool install --global dotnet-stryker
          dotnet stryker -p src/test/api.tests.csproj
