name: API CI

on:
  push:
    branches: [main]
    paths:
      - "src/api/**"
      - "src/test/api.tests/**"
      - ".github/workflows/api-ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/api/**"
      - "src/test/api.tests/**"
      - ".github/workflows/api-ci.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: |
          dotnet restore src/api/api.csproj
          dotnet restore src/test/api.tests/api.tests.csproj

      - name: Build
        run: |
          dotnet build src/api/api.csproj --no-restore
          dotnet build src/test/api.tests/api.tests.csproj --no-restore

      # Install report generator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Run tests with coverage
      - name: Test with coverage
        run: |
          dotnet test src/test/api.tests/api.tests.csproj \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --settings ./src/test/api.tests/coverlet.runsettings

      # List files for debugging
      - name: List coverage files
        run: |
          echo "Content of TestResults directory:"
          find ./TestResults -type f

      # Generate coverage report
      - name: Generate coverage report
        run: |
          reportgenerator \
          "-reports:./TestResults/**/coverage.cobertura.xml" \
          "-targetdir:./coveragereport" \
          "-reporttypes:Html;TextSummary"

      # Display coverage summary
      - name: Display coverage summary
        run: cat ./coveragereport/Summary.txt || echo "Summary not generated"

      # Upload coverage report as artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            ./coveragereport
            ./TestResults

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore src/api/api.csproj

      - name: Build
        run: dotnet build src/api/api.csproj --no-restore --configuration Release

      # Optional: Code quality checks
      - name: Check Code Format
        continue-on-error: true
        run: |
          dotnet tool install --global dotnet-format
          dotnet format src/api/api.csproj --verify-no-changes
